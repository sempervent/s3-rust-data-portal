services:
  # ===== DATABASE MIGRATIONS =====
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
      target: runtime
    profiles: ["migrations", "dev", "prod"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-blacklake}:${POSTGRES_PASSWORD:-blacklake}@db:5432/${POSTGRES_DB:-blacklake}
      RUST_LOG: ${RUST_LOG:-info}
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Waiting for database to be ready...' &&
      sleep 5 &&
      echo 'Running database migrations...' &&
      sqlx migrate run &&
      echo 'Migrations completed successfully!'
      "
    networks:
      - backplane

  # ===== BLACKLAKE CLI =====
  cli:
    build:
      context: .
      dockerfile: Dockerfile.cli
      target: runtime
    profiles: ["cli", "dev", "prod"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-blacklake}:${POSTGRES_PASSWORD:-blacklake}@db:5432/${POSTGRES_DB:-blacklake}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-blacklake}
      S3_REGION: ${S3_REGION:-us-east-1}
      API_BASE_URL: http://api:8080
      RUST_LOG: ${RUST_LOG:-info}
    volumes:
      - ./data:/data
    working_dir: /data
    stdin_open: true
    tty: true
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - backplane

  # ===== MIGRATION RUNNER (One-time) =====
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrations
      target: runtime
    profiles: ["migrate"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-blacklake}:${POSTGRES_PASSWORD:-blacklake}@db:5432/${POSTGRES_DB:-blacklake}
      RUST_LOG: ${RUST_LOG:-info}
    depends_on:
      db:
        condition: service_healthy
    command: >
      bash -c "
      echo 'Running database migrations...' &&
      sqlx migrate run &&
      echo 'Migrations completed successfully!'
      "
    networks:
      - backplane

networks:
  backplane:
    external: true
