# BlackLake API Multi-Stage Dockerfile
# Week 5: Multi-architecture builds with security and optimization

# ===== BUILD ARGUMENTS =====
ARG REGISTRY=ghcr.io
ARG IMAGE_PREFIX=blacklake
ARG VERSION=latest
ARG GIT_SHA=""
ARG BUILD_DATE=""

# ===== PLANNER STAGE =====
FROM rust:1.82-slim AS planner
WORKDIR /app
RUN cargo install cargo-chef
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# ===== BUILDER STAGE =====
FROM rust:1.82-slim AS builder
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy recipe and build dependencies
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source code
COPY . .

# Prepare SQLx offline data
RUN cargo sqlx prepare --workspace

# Build the application
RUN cargo build --release --bin api --bin jobrunner

# ===== RUNTIME STAGE =====
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r blacklake && useradd -r -g blacklake blacklake

# Create app directory
WORKDIR /app

# Copy binaries from builder
COPY --from=builder /app/target/release/api /app/api
COPY --from=builder /app/target/release/jobrunner /app/jobrunner

# Copy SQLx data
COPY --from=builder /app/sqlx-data.json /app/sqlx-data.json

# Set ownership
RUN chown -R blacklake:blacklake /app

# Switch to non-root user
USER blacklake

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/live || exit 1

# Default command
CMD ["./api"]

# ===== DEVELOPMENT STAGE =====
FROM rust:1.82-slim AS development

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install cargo-watch for hot reload
RUN cargo install cargo-watch

# Create app directory
WORKDIR /app

# Copy source code
COPY . .

# Create non-root user
RUN groupadd -r blacklake && useradd -r -g blacklake blacklake
RUN chown -R blacklake:blacklake /app

# Switch to non-root user
USER blacklake

# Expose port
EXPOSE 8080

# Development command with hot reload
CMD ["cargo", "watch", "-x", "run"]

# ===== LABELS =====
LABEL org.opencontainers.image.title="BlackLake API"
LABEL org.opencontainers.image.description="BlackLake Data Artifact Management API"
LABEL org.opencontainers.image.vendor="BlackLake"
LABEL org.opencontainers.image.source="https://github.com/blacklake/blacklake"
LABEL org.opencontainers.image.licenses="MIT"