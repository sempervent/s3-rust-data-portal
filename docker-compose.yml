services:
  # ===== CORE DATABASE =====
  db:
    image: postgres:16-alpine
    platform: linux/amd64
    profiles: ["dev", "prod"]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-blacklake}
      POSTGRES_USER: ${POSTGRES_USER:-blacklake}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-blacklake}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - ./ops/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_buffers=256MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c effective_cache_size=1GB
      -c random_page_cost=1.1
      -c log_statement=all
      -c log_min_duration_statement=1000
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-blacklake} -d ${POSTGRES_DB:-blacklake}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backplane

  # ===== OBJECT STORAGE =====
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    profiles: ["dev", "prod"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-blacklake,exports,mlflow}
    volumes:
      - minio_data:/data
      - ./ops/minio/retention.json:/etc/minio/retention.json:ro
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backplane

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    platform: linux/amd64
    profiles: ["dev", "prod"]
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      mc mb myminio/blacklake --ignore-existing;
      mc mb myminio/exports --ignore-existing;
      mc mb myminio/mlflow --ignore-existing;
      mc ilm add myminio/blacklake --expiry-days 90;
      mc ilm add myminio/exports --expiry-days 30;
      echo 'MinIO buckets initialized';
      "
    networks:
      - backplane

  # ===== AUTHENTICATION =====
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    platform: linux/amd64
    profiles: ["dev", "prod"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/${POSTGRES_DB:-blacklake}
      KC_DB_USERNAME: ${POSTGRES_USER:-blacklake}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-blacklake}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    command: >
      start-dev
      --http-port=8080
      --hostname=localhost
      --hostname-port=8080
    ports:
      - "${KEYCLOAK_PORT:-8081}:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backplane

  # ===== SEARCH BACKEND =====
  solr:
    image: solr:9.4
    platform: linux/amd64
    profiles: ["search-solr", "dev", "prod"]
    environment:
      - SOLR_HEAP=512m
      - SOLR_JAVA_MEM="-Xms512m -Xmx512m"
      - SOLR_OPTS="-DzkClientTimeout=30000 -DzkRun"
    volumes:
      - solr_data:/var/solr
      - ./ops/solr/configsets/blacklake:/opt/solr/server/solr/configsets/blacklake:ro
    ports:
      - "${SOLR_PORT:-8983}:8983"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8983/solr/admin/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backplane

  # SolrCloud initialization
  solr-init-cloud:
    image: solr:9.4
    profiles: ["search-solr", "dev", "prod"]
    depends_on:
      solr:
        condition: service_healthy
    volumes:
      - ./ops/solr/init-cloud.sh:/init-cloud.sh:ro
    entrypoint: ["/bin/bash", "/init-cloud.sh"]
    networks:
      - backplane

  # ===== CACHE & QUEUE =====
  redis:
    image: redis:7-alpine
    profiles: ["dev", "prod"]
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backplane

  # ===== ANTIVIRUS =====
  clamav:
    image: clamav/clamav:1.0
    profiles: ["av", "dev", "prod"]
    environment:
      CLAMAV_NO_FRESHCLAMD: false
    volumes:
      - clamav_data:/var/lib/clamav
    ports:
      - "${CLAMAV_PORT:-3310}:3310"
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backplane

  # ===== OBSERVABILITY =====
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    profiles: ["dev", "prod"]
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./ops/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "${OTEL_GRPC_PORT:-4317}:4317"
      - "${OTEL_HTTP_PORT:-4318}:4318"
    depends_on:
      - prometheus
    networks:
      - backplane

  prometheus:
    image: prom/prometheus:v2.47.0
    platform: linux/amd64
    profiles: ["dev", "prod"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./ops/prometheus/rules:/etc/prometheus/rules:ro
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backplane

  grafana:
    image: grafana/grafana:10.1.0
    platform: linux/amd64
    profiles: ["dev", "prod"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./ops/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - backplane

  # ===== ML PLATFORM =====
  mlflow:
    image: python:3.11-slim
    platform: linux/amd64
    profiles: ["ml", "dev", "prod"]
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://${POSTGRES_USER:-blacklake}:${POSTGRES_PASSWORD:-blacklake}@db:5432/${POSTGRES_DB:-blacklake}
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow/
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    command: >
      bash -c "
      pip install mlflow psycopg2-binary boto3 &&
      mlflow server
      --backend-store-uri=$$MLFLOW_BACKEND_STORE_URI
      --default-artifact-root=$$MLFLOW_DEFAULT_ARTIFACT_ROOT
      --host=0.0.0.0
      --port=5000
      "
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - backplane

  # ===== BLACKLAKE API =====
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: runtime
    profiles: ["dev", "prod"]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-blacklake}:${POSTGRES_PASSWORD:-blacklake}@db:5432/${POSTGRES_DB:-blacklake}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-blacklake}
      S3_REGION: ${S3_REGION:-us-east-1}
      OIDC_ISSUER: http://keycloak:8080/realms/master
      OIDC_AUDIENCE: ${OIDC_AUDIENCE:-blacklake}
      REDIS_URL: redis://redis:6379
      SOLR_URL: http://solr:8983
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      RUST_LOG: ${RUST_LOG:-info}
      RUST_BACKTRACE: 1
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy
      solr:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backplane

  # ===== BLACKLAKE UI =====
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: production
    platform: linux/amd64
    profiles: ["prod"]
    ports:
      - "${UI_PORT:-3000}:80"
    depends_on:
      - api
    networks:
      - backplane

  ui-dev:
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: development
    profiles: ["ui-dev", "dev"]
    platform: linux/amd64
    environment:
      VITE_API_BASE_URL: http://localhost:8080
      VITE_OIDC_ISSUER: http://localhost:8081/realms/master
      VITE_OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:-blacklake}
      VITE_OIDC_REDIRECT_URI: http://localhost:5173/callback
    ports:
      - "${UI_DEV_PORT:-5173}:5173"
    volumes:
      - ./ui:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - backplane

  # ===== REVERSE PROXY =====
  gateway:
    image: nginx:1.25-alpine
    platform: linux/amd64
    profiles: ["prod"]
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ops/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${GATEWAY_HTTP_PORT:-80}:80"
      - "${GATEWAY_HTTPS_PORT:-443}:443"
    depends_on:
      - api
      - ui
    networks:
      - backplane

# ===== NETWORKS =====
networks:
  backplane:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  solr_data:
    driver: local
  redis_data:
    driver: local
  clamav_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local