# BlackLake Security Scanning Workflow
# Week 5: Comprehensive security scanning with Trivy and Grype

name: Security Scan

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: blacklake

jobs:
  # ===== TRIVY VULNERABILITY SCAN =====
  trivy:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [api, ui, gateway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker buildx bake --set ${{ matrix.target }}.output=type=docker ${{ matrix.target }}-local

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: blacklake-${{ matrix.target }}:local
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  # ===== GRYPE VULNERABILITY SCAN =====
  grype:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [api, ui, gateway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker buildx bake --set ${{ matrix.target }}.output=type=docker ${{ matrix.target }}-local

      - name: Run Grype vulnerability scanner
        uses: anchore/grype-action@v1
        with:
          image: blacklake-${{ matrix.target }}:local
          format: sarif
          output: grype-results-${{ matrix.target }}.sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'grype-results-${{ matrix.target }}.sarif'

  # ===== CODEQL ANALYSIS =====
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [rust, javascript]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ===== DEPENDENCY SCAN =====
  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: ui/pnpm-lock.yaml

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: ui
        run: pnpm install

      - name: Run npm audit
        working-directory: ui
        run: pnpm audit --audit-level moderate

  # ===== SECRET SCANNING =====
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ===== CONTAINER SECURITY =====
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [api, ui, gateway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: |
          docker buildx bake --set ${{ matrix.target }}.output=type=docker ${{ matrix.target }}-local

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: blacklake-${{ matrix.target }}:local
          only-severities: critical,high
          write-comment: true

      - name: Run Docker Scout for policy evaluation
        uses: docker/scout-action@v1
        with:
          command: evaluate
          image: blacklake-${{ matrix.target }}:local
          policy: docker/scout-policies/policy.json
          write-comment: true

  # ===== SECURITY SUMMARY =====
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [trivy, grype, codeql, dependency-scan, secret-scan, container-security]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | ${{ needs.trivy.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | ${{ needs.grype.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any security findings in the GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address critical and high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies as needed" >> $GITHUB_STEP_SUMMARY

      - name: Fail on critical security issues
        if: needs.trivy.result == 'failure' || needs.grype.result == 'failure' || needs.secret-scan.result == 'failure'
        run: |
          echo "❌ Critical security issues detected!"
          echo "Please review the security scan results and address any critical vulnerabilities."
          exit 1
