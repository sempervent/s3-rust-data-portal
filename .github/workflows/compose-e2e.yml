# BlackLake Compose E2E Test Workflow
# Week 5: Full stack integration testing

name: Compose E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  COMPOSE_PROJECT_NAME: blacklake-e2e

jobs:
  # ===== FULL STACK E2E =====
  e2e:
    name: Full Stack E2E
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # Use GitHub's PostgreSQL service for testing
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blacklake_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          docker buildx bake --set api.output=type=docker --set ui.output=type=docker local

      - name: Start full stack
        run: |
          docker compose --profile dev up -d --wait
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: blacklake_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8080/live; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:9001; do sleep 5; done'

      - name: Run database migrations
        run: |
          docker compose exec -T api sqlx migrate run

      - name: Test API health endpoints
        run: |
          echo "Testing API health endpoints..."
          curl -f http://localhost:8080/live
          curl -f http://localhost:8080/ready
          curl -f http://localhost:8080/api/v1/health

      - name: Test UI accessibility
        run: |
          echo "Testing UI accessibility..."
          curl -f http://localhost:3000
          curl -f http://localhost:3000/health

      - name: Test MinIO console
        run: |
          echo "Testing MinIO console..."
          curl -f http://localhost:9001

      - name: Test Keycloak
        run: |
          echo "Testing Keycloak..."
          curl -f http://localhost:8081/health/ready

      - name: Test Prometheus
        run: |
          echo "Testing Prometheus..."
          curl -f http://localhost:9090/-/healthy

      - name: Test Grafana
        run: |
          echo "Testing Grafana..."
          curl -f http://localhost:3001/api/health

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Test repository creation
          curl -X POST http://localhost:8080/api/v1/repos \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer test-token" \
            -d '{"name": "test-repo", "description": "Test repository"}'
          
          # Test search functionality
          curl -f "http://localhost:8080/api/v1/search?q=test"

      - name: Check service logs
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker compose logs api
          echo "=== UI Logs ==="
          docker compose logs ui
          echo "=== Database Logs ==="
          docker compose logs db
          echo "=== MinIO Logs ==="
          docker compose logs minio

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # ===== LOAD TEST =====
  load-test:
    name: Load Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          docker buildx bake --set api.output=type=docker --set ui.output=type=docker local

      - name: Start services
        run: |
          docker compose --profile dev up -d --wait

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/live; do sleep 5; done'

      - name: Run K6 load tests
        run: |
          docker run --rm --network host -v $(pwd)/ops/k6:/scripts grafana/k6:latest run /scripts/load-test.js

      - name: Generate load test report
        run: |
          docker run --rm --network host -v $(pwd)/ops/k6:/scripts grafana/k6:latest run --out json=/scripts/results.json /scripts/load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: ops/k6/results.json

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # ===== SECURITY TEST =====
  security-test:
    name: Security Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test images
        run: |
          docker buildx bake --set api.output=type=docker --set ui.output=type=docker local

      - name: Start services
        run: |
          docker compose --profile dev up -d --wait

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/live; do sleep 5; done'

      - name: Run security tests
        run: |
          # Test for common security headers
          curl -I http://localhost:8080/api/v1/health | grep -i "x-frame-options"
          curl -I http://localhost:8080/api/v1/health | grep -i "x-content-type-options"
          
          # Test rate limiting
          for i in {1..20}; do curl -f http://localhost:8080/api/v1/health; done

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # ===== NOTIFICATION =====
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [e2e, load-test, security-test]
    if: always()

    steps:
      - name: Notify on success
        if: needs.e2e.result == 'success' && needs.security-test.result == 'success'
        run: |
          echo "✅ E2E tests passed!"
          echo "All services are healthy and functional."

      - name: Notify on failure
        if: needs.e2e.result == 'failure' || needs.security-test.result == 'failure'
        run: |
          echo "❌ E2E tests failed!"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "Security: ${{ needs.security-test.result }}"
          exit 1