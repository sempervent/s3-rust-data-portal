# BlackLake Multi-Arch Build Workflow
# Week 5: Multi-architecture image builds with security scanning

name: Build Multi-Arch Images

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: blacklake
  VERSION: ${{ github.ref == 'refs/heads/main' && 'latest' || github.ref == 'refs/heads/develop' && 'develop' || github.ref_name }}

jobs:
  # ===== BUILD IMAGES =====
  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [api, ui, gateway]
        include:
          - target: api
            context: .
            dockerfile: Dockerfile.api
          - target: ui
            context: ./ui
            dockerfile: Dockerfile.ui
          - target: gateway
            context: ./ops/nginx
            dockerfile: Dockerfile.gateway

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.target }}-${{ env.REGISTRY }}
          cache-to: type=gha,mode=max,scope=${{ matrix.target }}-${{ env.REGISTRY }}
          build-args: |
            REGISTRY=${{ env.REGISTRY }}
            IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
            VERSION=${{ env.VERSION }}
            GIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # ===== SECURITY SCAN =====
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        target: [api, ui, gateway]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.target }}:${{ env.VERSION }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'

  # ===== COMPOSE E2E TEST =====
  compose-e2e:
    name: Compose E2E Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build local images
        run: |
          docker buildx bake --set api.output=type=docker --set ui.output=type=docker --set gateway.output=type=docker local

      - name: Start services
        run: |
          docker compose --profile dev up -d --wait

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/live; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Run smoke tests
        run: |
          # Test API health
          curl -f http://localhost:8080/live
          curl -f http://localhost:8080/ready
          
          # Test UI
          curl -f http://localhost:3000
          
          # Test basic API functionality
          curl -f http://localhost:8080/api/v1/health

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # ===== PERFORMANCE TEST =====
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build local images
        run: |
          docker buildx bake --set api.output=type=docker --set ui.output=type=docker local

      - name: Start services
        run: |
          docker compose --profile dev up -d --wait

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/live; do sleep 5; done'

      - name: Run K6 performance tests
        run: |
          docker run --rm --network host -v $(pwd)/ops/k6:/scripts grafana/k6:latest run /scripts/load-test.js

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # ===== NOTIFICATION =====
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, security, compose-e2e]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Notify on success
        if: needs.build.result == 'success' && needs.security.result == 'success' && needs.compose-e2e.result == 'success'
        run: |
          echo "✅ All builds completed successfully!"
          echo "Images pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}"
          echo "Version: ${{ env.VERSION }}"

      - name: Notify on failure
        if: needs.build.result == 'failure' || needs.security.result == 'failure' || needs.compose-e2e.result == 'failure'
        run: |
          echo "❌ Build failed!"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "E2E: ${{ needs.compose-e2e.result }}"
          exit 1