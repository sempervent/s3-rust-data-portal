name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install sqlx-cli
      run: cargo install sqlx-cli --no-default-features --features rustls,postgres

    - name: Setup test database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      run: |
        sqlx database create
        sqlx migrate run

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        SQLX_OFFLINE: true
      run: cargo build --all-features

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        SQLX_OFFLINE: true
      run: cargo test --all-features

    - name: Prepare sqlx-data
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      run: sqlx prepare --workspace -- --all-features

    - name: Upload sqlx-data.json
      uses: actions/upload-artifact@v3
      with:
        name: sqlx-data
        path: sqlx-data.json

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Download sqlx-data.json
      uses: actions/download-artifact@v3
      with:
        name: sqlx-data

    - name: Build
      env:
        SQLX_OFFLINE: true
      run: |
        cargo build --release --target ${{ matrix.target }}
        cargo build --release --target ${{ matrix.target }} -p blacklake-cli

    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/blacklake-api
          target/${{ matrix.target }}/release/blacklake

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: blacklake-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build CLI Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.cli
        push: false
        tags: blacklake-cli:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'blacklake-api:latest'
        format: 'sarif'
        output: 'trivy-api-results.sarif'

    - name: Run Trivy vulnerability scanner on CLI image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'blacklake-cli:latest'
        format: 'sarif'
        output: 'trivy-cli-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-api-results.sarif,trivy-cli-results.sarif'
